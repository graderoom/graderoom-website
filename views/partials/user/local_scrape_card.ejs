<!-- Local Scrape Card -->
<div class="blurred-login" id="localScrapeCardDisplay">
    <div class="blurred-background"></div>
    <div class="col-sm-8 col-md-7 col-lg-5 mx-auto">
        <div id="localScrapeCard" class="card card-signin my-5">
            <btn class="btn btn-md" onclick="closeForm('localScrapeCardDisplay')"
                 style="display:table; width: fit-content; width: -moz-fit-content; margin-bottom:0">
                <i class="fa fa-close" aria-hidden="true"></i> Close
            </btn>
            <btn class="btn btn-med" onclick="showCard('#gradeChangesCardDisplay')"
                 style="position: absolute; width: fit-content; width: -moz-fit-content; right: 0; margin-bottom: 0">
                View Sync Log <i class="fa fa-external-link-square"></i></btn>
            <div class="card-body" style="max-height: 70vh; overflow-y: scroll; overflow-x: hidden; transition: 500ms">
                <div class="updateGradesMessage alert alert-info"
                     style="display:block">
                    <div style="display: flex; justify-content: flex-start; align-items: flex-start; flex-flow: column">
                        <div style="display:none" class="sk-chase-mini">
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                            <div class="sk-chase-dot mini"></div>
                        </div>
                        <div class="font-weight-bold messageTxt">Loading Sync Status...</div>
                    </div>
                </div>
                <h1 class="card-title text-center">Local Scrape</h1>
                <div id="installExtensionInfo" class="card-footer" style="display: none">
                    <p>
                        <b>To use local scraping, you must install the Graderoom Extension.</b>
                    </p>
                    <p>
                        <b>This extension allows Graderoom to securely access your grades from PowerSchool without
                            storing your login information on our servers.</b>
                    </p>
                    <button id="extensionInstallBtn" class="btn btn-med btn-default" type="button"
                            onclick="updateButton()">
                        Install Graderoom Extension
                    </button>
                </div>
                <div id="localScrapeDiv" class="card-footer" style="display:none">
                    <p>
                        <b>Click the button below to sync your grades.</b></p>
                    <form id="localScrapeForm" onsubmit="event.preventDefault(); initSync()" class="form-signin">
                        <button id="localScrapeButton" class="btn btn-lg btn-default" type="submit">
                            Sync
                            <div>
                                <span></span>
                                <span></span>
                                <span></span>
                            </div>
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function randToken() {
        return Math.random().toString(36).substring(2);
    }

    function initSync() {
        scrapeToken = randToken();
        sendData('can-i-update', {token: scrapeToken});
    }

    let loginWindow;
    let openedStore = false;

    const chromeExtensionID = 'dhidkhdjfikcdmfngbpnbgpnboiodnoo';
    const requiredExtensionVersion = [1, 5, 2];
    let firefoxExtensionInstalled = false;
    let actualExtensionVersion = null;

    let messagePromises = {};

    function updateButton() {
        if (openedStore) {
            checkExtensionInstalled().then((installed) => {
                if (installed) {
                    document.getElementById('installExtensionInfo').style.display = 'none';
                    document.getElementById('localScrapeDiv').style.display = 'block';
                } else {
                    openedStore = false;
                    document.getElementById('extensionInstallBtn').textContent = 'Install Graderoom Extension';

                    alert('The Graderoom Extension is not installed. Please try again.');
                }
            });
        } else {
            openedStore = true;

            if (window.chrome === undefined) {
                window.open('https://addons.mozilla.org/en-US/firefox/addon/graderoom/', '_blank');
            } else {
                window.open(`https://chrome.google.com/webstore/detail/graderoom/${chromeExtensionID}`, '_blank');
            }
            document.getElementById('extensionInstallBtn').textContent = 'I installed it!';
        }
    }

    window.addEventListener('message', (event) => {
        if (event.source !== window) return;
        if (event.origin !== window.origin) return;
        if (!event.data || event.data.direction !== 'from-extension') return;

        if (event.data.type === 'status') {
            if (checkLastUpdated) {
                clearTimeout(checkLastUpdated);
            }
            let {progress, message} = event.data;
            document.querySelectorAll('.updateGradesMessage > span').forEach((elem) => {
                elem.style.opacity = '0.5';
                elem.style.width = `${progress}%`;
            });
            document.querySelectorAll('.updateGradesMessage').forEach((elem) => {
                elem.classList.remove('alert-danger');
                elem.classList.remove('alert-success');
                elem.classList.add('alert-info');
                elem.querySelector('.messageTxt').textContent = message;
            });
            return;
        }

        if (event.data.token && messagePromises[event.data.token]) {
            let data = event.data;
            let token = data.token;
            delete data.token;
            delete data.direction;
            messagePromises[token](data);
            delete messagePromises[token];
        } else if (event.data.type === 'presence') {
            firefoxExtensionInstalled = true;
        }
    });

    async function checkExtensionInstalled() {
        if (window.chrome !== undefined) {
            return checkChromeExtensionInstalled();
        }
        if (firefoxExtensionInstalled) {
            return sendMessageToExtension({type: 'get-version'}).then((response) => {
                if (response) {
                    actualExtensionVersion = response.version;
                    if (!checkVersion(response.version)) {
                        alert('Your Graderoom Extension is out of date');
                        return false;
                    } else {
                        return true;
                    }
                }
                return false;
            }).catch(() => {
                return false;
            }) ?? false;
        }
        return false;
    }

    async function checkChromeExtensionInstalled() {
        if (chrome.runtime === undefined) {
            return false;
        }
        return sendMessageToExtension({type: 'get-version'}).then((response) => {
            if (response) {
                actualExtensionVersion = response.version;
                if (!checkVersion(response.version)) {
                    alert('Your Graderoom Extension is out of date');
                    return false;
                } else {
                    return true;
                }
            }
            return false;
        }).catch(() => {
            return false;
        }) ?? false;
    }

    async function sendMessageToExtension(message) {
        if (firefoxExtensionInstalled) {
            message.token = randToken();
            message.direction = 'to-extension';
            return new Promise((resolve) => {
                messagePromises[message.token] = resolve;
                window.postMessage(message, window.origin);
            });
        } else if (window.chrome !== undefined) {
            return chrome.runtime.sendMessage(chromeExtensionID, message);
        }

        return new Promise((resolve, reject) => {
            reject();
        });
    }

    function checkVersion(version) {
        if (typeof version !== 'string') return false;

        let installedVersion = version.split('.').map(x => parseInt(x));
        if (installedVersion.length === 0 || installedVersion.some(isNaN)) return false;

        for (let i = 1; i < Math.max(requiredExtensionVersion.length, installedVersion.length); i++) {
            let curr = requiredExtensionVersion[i] || 0;
            let inst = installedVersion[i] || 0;
            if (inst > curr) {
                return true; // Installed version is newer
            } else if (inst < curr) {
                return false; // Installed version is older
            }
        }
        return true; // Versions are the same
    }

    function updateGradesCallback(response) {
        let data = response.data;
        switch (response.type) {
            case 'get-present-response':
                $('#localScrapeDiv').find('button').prop('disabled', false).find('div').removeClass('loading');
                $('#loadingDisplay').hide();
                shortcutsEnabled = true;
                if (!data.success) {
                    if (data.message === 'Not logged in.') {
                        showCard('#localScrapeCardDisplay');
                    } else {
                        console.error(data.message);
                    }
                } else {
                    let term = Object.keys(data.data)[0];
                    let semester = Object.keys(data.data[term])[0];
                    let grades = data.data[term][semester];
                    $('.updateGradesMessage .messageTxt').text('Uploading grades...');
                    sendData('start-update-from-user', {term: term, semester: semester, grades: grades});
                }
                break;
            case 'get-history-response':
                console.log(data);
                break;
            case 'get-locked-response':
                console.log(data);
                break;
        }
    }

    async function ensureLoggedIn(fromButton = true) {
        if (!await checkExtensionInstalled()) return false;

        $('#localScrapeDiv').find('button').prop('disabled', true).find('div').addClass('loading');
        $('.updateGradesMessage').show().removeClass('alert-danger').addClass('alert-info');
        $('.updateGradesMessage .messageTxt').text('Syncing...');

        let resp = await sendMessageToExtension({type: 'get-present', target: 'offscreen'});
        if (!resp.data.success) {
            if (resp.data.message !== 'Not logged in.') {
                console.error(resp.data.message);
                $('.updateGradesMessage').removeClass('alert-info').addClass('alert-danger');
                $('.updateGradesMessage .messageTxt').text('An error occurred: ' + resp.data.message);
                $('#localScrapeDiv').find('button').prop('disabled', false).find('div').removeClass('loading');

                return false;
            }

            if (!fromButton) {
                $('.updateGradesMessage').hide();
                $('#localScrapeDiv').find('button').prop('disabled', false).find('div').removeClass('loading');
                return false;
            }

            $('.updateGradesMessage .messageTxt').text('You are not logged in. Please log in to PowerSchool in the opened window.');
            $('#localScrapeDiv').find('button').prop('disabled', false).find('div').removeClass('loading');

            if (!loginWindow || loginWindow.closed) {
                loginWindow = window.open('https://powerschool.bcp.org/student/idp?_userTypeHint=student', null, 'width=600,height=700');
            } else {
                loginWindow.focus();
            }
        } else {
            loginWindow?.close();
            updateGradesCallback(resp);
        }
    }
</script>
